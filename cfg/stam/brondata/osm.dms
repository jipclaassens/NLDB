container OSM:  using = "eenheden;geometries"
{
	parameter<string> file_date := Parameters/OSM_file_date;
	parameter<string> dir       := '%SourceDataDir%/NetworkModel/Infrastructuur/OSM/'+file_date;
	parameter<string> date      := 'latest';
	unit<uint32>      Regios    := Parameters/Advanced/OSM_Regios;

	container Prepare_SourceData :=
		for_each_ne(
			Regios/name
			, 'Prepare_SourceData_T('+quote(Regios/label)+','+quote(Regios/country)+')'
		)
	{
		parameter<string> Generate := =AsList(Regios/name+'/Generate', ' + ');
	}
	
	Template Prepare_SourceData_T
	{
		parameter<string> Regio;
		parameter<string> Country;
		///
		unit<uint32> Read_Roads_shp 
		:	StorageName     = "= dir + '/'+Regio+'-'+date+'-free.shp/gis_osm_roads_free_1.shp'"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	DialogType = "Map"
		,	DialogData = "geometry_lb"	
		{
			attribute<wgs84_base>        geometry    (arc);
			attribute<rdc>               geometry_rd (arc)   := LatLongWgs842RD(geometry, dpoint)[rdc];
			attribute<string>            fclass;
			attribute<int32>             maxspeed;
		}
		
		unit<uint32> Make_Roads_fss := Read_Roads_shp
		,   StorageName = "='%LocalDataDir%/NLDB/OSM/RegionFiles/'+Regio+'/Roads_'+file_date+'.fss'"
		{
			attribute<rdc>                         geometry (arc) := Read_Roads_shp/geometry_rd;
			attribute<string>                      fclass         := Read_Roads_shp/fclass;
			attribute<km_hr>                       maxspeed       := Read_Roads_shp/maxspeed[km_hr];
			attribute<string>                      OSM_id         := Read_Roads_shp/OSM_id;
		}
		
		unit<uint32> Read_Roads_fss 
		:   StorageName = "='%LocalDataDir%/NLDB/OSM/RegionFiles/'+Regio+'/Roads_'+file_date+'.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<rdc>                         geometry (arc);
			attribute<string>                      fclass;
			attribute<string>                      OSM_id;
			attribute<km_hr>                       maxspeed;
			attribute<typeringen/OSM/wegtype> wegtype                   := rlookup(fclass, typeringen/OSM/wegtype/name);  
		}
		
		unit<uint32> Attributes := SubItem_PropValues(Make_Roads_fss,'name');
		parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList('Make_Roads_fss/'+Attributes/name, ';')";
	}
	
	container Merge_SourceData
	{
		container Make_Merged_Roads_perCountry :=
			for_each_ne(
				Regios/Countries/name
				, 'Make_Merged_Roads_perCountry_T('+quote(Regios/Countries/name)+')'
			)
		{
			parameter<string> Generate := =AsList('Make_Merged_Roads_perCountry/'+Regios/Countries/name+'/Generate','+');
		}

		
		Template Make_Merged_Roads_perCountry_T
		{
			parameter<string> country_name;
			//
			unit<uint32> Country_regios := ='Regios/'+country_name;
			
			unit<uint32>      Attributes := SubItem_PropValues(Make_Merged_Roads,'name');
			parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList('Make_Merged_Roads/'+Attributes/name, ';')";

			unit<uint32>  Make_Merged_Roads := ='union_unit('+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_fss', ',')+')'
			,   StorageName = "='%LocalDataDir%/NLDB/OSM/Merged_Roads_'+country_name+'_'+file_date+'.fss'"
			{
				attribute<rdc>                          geometry (arc)                   := ='union_data(., '+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_fss/geometry', ',')+')';
				attribute<km_hr>                        maxspeed                         := ='union_data(., '+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_fss/maxspeed', ',')+')';
				attribute<typeringen/OSM/wegtype>  wegtype                          := ='union_data(., '+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_fss/wegtype', ',')+')';
				attribute<string>                       OSM_id                           := ='union_data(., '+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_fss/OSM_id', ',')+')';
			}
			
			unit<uint32>  Read_Merged_Roads 
			:   StorageName = "='%LocalDataDir%/NLDB/OSM/Merged_Roads_'+country_name+'_'+file_date+'.fss'"
			,   StorageReadOnly = "true"
			{
				attribute<rdc>                          geometry (arc);
				attribute<km_hr>                        maxspeed;
				attribute<typeringen/OSM/wegtype>  wegtype;
				attribute<string>                       OSM_id;
				
				attribute<km_hr>                       maxspeed_edit00                                                := maxspeed != 0[km_hr] && IsDefined(maxspeed) && maxspeed < 140[km_hr]  ? maxspeed : rjoin(wegtype, id(typeringen/OSM/wegtype), rth_maxspeed_per_wegtype_Defined);
				attribute<km_hr>                       maxspeed_edit0                                                 := wegtype == typeringen/OSM/wegtype/v/motorway && maxspeed_edit00 < 80[km_hr] ? rjoin(wegtype, id(typeringen/OSM/wegtype), rth_maxspeed_per_wegtype_Defined) : maxspeed_edit00;
				attribute<km_hr>                       maxspeed_edit                                                  := switch(case(maxspeed_edit0 == 0[km_hr], Parameters/Advanced/CarDefaultSpeed), case(maxspeed_edit0 < 15[km_hr], 15[km_hr]), maxspeed_edit0);
				attribute<km_hr>                       rth_maxspeed_per_wegtype (typeringen/OSM/wegtype)              := rth_element(maxspeed, 0.9f, wegtype);
				attribute<km_hr>                       rth_maxspeed_per_wegtype_Defined (typeringen/OSM/wegtype)      := MakeDefined(rth_maxspeed_per_wegtype, Parameters/Advanced/CarDefaultSpeed_low) == 0[km_hr] ? Parameters/Advanced/CarDefaultSpeed_low : MakeDefined(rth_maxspeed_per_wegtype, Parameters/Advanced/CarDefaultSpeed_low);
			}
		}
		
		unit<uint32>  Make_Merged_Roads := ='union_unit('+AsList('Make_Merged_Roads_perCountry/'+Regios/Countries/name+'/Read_Merged_Roads', ',')+')'
		,   StorageName = "='%LocalDataDir%/NLDB/OSM/Merged_Roads_'+file_date+'.fss'"
		{
			attribute<rdc>                          geometry (arc)     := ='union_data(., '+AsList('Make_Merged_Roads_perCountry/'+Regios/Countries/name+'/Read_Merged_Roads/geometry', ',')+')';
			attribute<km_hr>                        maxspeed           := ='union_data(., '+AsList('Make_Merged_Roads_perCountry/'+Regios/Countries/name+'/Read_Merged_Roads/maxspeed_edit', ',')+')';
			attribute<typeringen/OSM/wegtype>       wegtype            := ='union_data(., '+AsList('Make_Merged_Roads_perCountry/'+Regios/Countries/name+'/Read_Merged_Roads/wegtype', ',')+')';
			attribute<string>                       OSM_id            := ='union_data(., '+AsList('Make_Merged_Roads_perCountry/'+Regios/Countries/name+'/Read_Merged_Roads/OSM_id', ',')+')';
		}
		
		unit<uint32> Attributes := SubItem_PropValues(Make_Merged_Roads,'name');
		parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList('Make_Merged_Roads/'+Attributes/name, ';')";
		
		unit<uint32>  Read_Merged_Roads 
		:   StorageName = "='%LocalDataDir%/NLDB/OSM/Merged_Roads_'+file_date+'.fss'"
		,   StorageReadOnly = "true"
		{
			attribute<rdc>                          geometry (arc);
			attribute<km_hr>                        maxspeed;
			attribute<typeringen/OSM/wegtype>       wegtype;
			attribute<string>                       OSM_id;
		}
	
	}
	
	#include <NetworkPreperation.dms>

	unit<uint32> Read_Final_Network
	:   StorageName = "='%LocalDataDir%/NLDB/OSM/Final_Network_'+file_date+'.fss'"
	,   StorageReadOnly = "true"
	{
		attribute<rdc>                          geometry (arc);
		attribute<typeringen/OSM/wegtype>  wegtype;
		attribute<km_hr>                        maxspeed;
		attribute<string>                       OSM_id;
		attribute<string>                       wegtype_label                    := typeringen/OSM/wegtype/label[wegtype];

		attribute<bool>                         isPartOfCarNetwork        := typeringen/OSM/wegtype/IsPartOfCarNetwork[wegtype];
		attribute<bool>                         isPartOfBikeNetwork       := typeringen/OSM/wegtype/isPartOfBikeNetwork[wegtype];
		attribute<bool>                         isPartOfPedestrianNetwork := typeringen/OSM/wegtype/isPartOfPedestrianNetwork[wegtype];
	}

	unit<uint32> Network_Car := subset(Read_Final_Network/isPartOfCarNetwork)
	{
		attribute<rdc>                          geometry (arc)                   := Read_Final_Network/geometry[nr_OrgEntity];
		attribute<typeringen/OSM/wegtype>  wegtype                          := Read_Final_Network/wegtype[nr_OrgEntity];
		attribute<string>                       OSM_id                           := Read_Final_Network/OSM_id[nr_OrgEntity];
		attribute<string>                       wegtype_label                    := Read_Final_Network/wegtype_label[nr_OrgEntity];
		
		attribute<km_hr>                        freeflow_speed_car               := Read_Final_Network/maxspeed[nr_OrgEntity];
	}
	unit<uint32> Network_Bike := subset(Read_Final_Network/isPartOfBikeNetwork)
	{
		attribute<rdc>                          geometry (arc)                   := Read_Final_Network/geometry[nr_OrgEntity];
		attribute<typeringen/OSM/wegtype>  wegtype                          := Read_Final_Network/wegtype[nr_OrgEntity];
		attribute<string>                       OSM_id                           := Read_Final_Network/OSM_id[nr_OrgEntity];
		attribute<string>                       wegtype_label                    := Read_Final_Network/wegtype_label[nr_OrgEntity];
		
		attribute<km_hr>                        freeflow_speed_car               := const((0/0)[km_hr],.);
	}
	unit<uint32> Network_Pedestrian := subset(Read_Final_Network/isPartOfPedestrianNetwork)
	{
		attribute<rdc>                          geometry (arc)                   := Read_Final_Network/geometry[nr_OrgEntity];
		attribute<typeringen/OSM/wegtype>  wegtype                          := Read_Final_Network/wegtype[nr_OrgEntity];
		attribute<string>                       OSM_id                           := Read_Final_Network/OSM_id[nr_OrgEntity];
		attribute<string>                       wegtype_label                    := Read_Final_Network/wegtype_label[nr_OrgEntity];
		
		attribute<km_hr>                        freeflow_speed_car               := const((0/0)[km_hr],.);
	}
	




	/*

	parameter<string> file_date := '20210803';
	parameter<string> dir := '%SourceDataDir%/OSM/'+file_date;
	parameter<string> date := 'latest';
	
	// parameter<string> date := '20200117';
	// parameter<string> dir := '%SourceDataDir%/OSM/' + date;

	unit<uint32> wegen_src 
	// :	StorageName     = "= dir + '/netherlands-'+substr(date,2,6)+'-free.shp/gis_osm_roads_free_1.shp'"
	:	StorageName     = "= dir + '/netherlands-'+date+'-free.shp/gis_osm_roads_free_1.shp'"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	,	DialogType = "Map"
	,	DialogData = "geometry_rd"	
	// , syncmode = "none"			
	{
		attribute<fpoint> 	         geometry (arc);	
		attribute<geometries/rdc>    geometry_rd (arc)   := LatLongWgs842RD(geometry, fpoint)[geometries/rdc];
		attribute<string>            fclass;
		attribute<int32>             maxspeed;
	}
	
	unit<uint32> water_src 
	// :	StorageName     = "= dir + '/netherlands-'+substr(date,2,6)+'-free.shp/gis_osm_roads_free_1.shp'"
	:	StorageName     = "= dir + '/netherlands-'+date+'-free.shp/gis_osm_water_a_free_1.shp'"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	,	DialogType = "Map"
	,	DialogData = "geometry_rd"	
	// , syncmode = "none"			
	{
		attribute<fpoint> 	         geometry (poly);	
		attribute<geometries/rdc>    geometry_rd (poly)   := LatLongWgs842RD(geometry, fpoint)[geometries/rdc];
		attribute<string>            fclass;
		attribute<int32>            code;
		
		unit<uint32> large := subset(code == 8202i || code == 8200i)
		,	DialogType = "Map"
		,	DialogData = "geometry_rd"	
		{
			attribute<geometries/rdc>    geometry_rd (poly) := ../geometry_rd[nr_OrgEntity];
			attribute<int32>            code               := ../code[nr_OrgEntity];
		}
	}
	
	unit<uint32> spoorwegen_src 
	// :	StorageName     = "= dir + '/netherlands-'+substr(date,2,6)+'-free.shp/gis_osm_railways_free_1.shp'"
	:	StorageName     = "= dir + '/netherlands-'+date+'-free.shp/gis_osm_railways_free_1.shp'"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	,	DialogType = "Map"
	,	DialogData = "geometry_rd"	
	, syncmode = "none"			
	{
		attribute<fpoint> 	         geometry (arc);	
		attribute<geometries/rdc>    geometry_rd (arc)   := LatLongWgs842RD(geometry, fpoint)[geometries/rdc];
		attribute<string>            fclass;
		
		unit<uint32> nodes := union_unit(spoorwegen_src, spoorwegen_src)
		{
			attribute<geometries/rdc> UnionData := union_data(.,first_point(geometry_rd), last_point(geometry_rd));
		}
		
	}
	
	unit<uint32> Railwaystations_2010 
	:	StorageName     = "%SourceDataDir%/OSM/railwaystations_nl_2010.shp"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	,	DialogType = "Map"
	,	DialogData = "geometry_rd"	
	{
		attribute<geometries/rdc>    geometry;
	}
	
	unit<uint32> Railwaystations_2015 
	:	StorageName     = "%SourceDataDir%/OSM/railwaystations_nl_2015.shp"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	,	DialogType = "Map"
	,	DialogData = "geometry_rd"	
	{
		attribute<geometries/rdc>    geometry;
	}
	
	unit<uint32> Railways_2015 
	:	StorageName     = "%SourceDataDir%/OSM/railways_nl_2015.shp"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	,	DialogType = "Map"
	,	DialogData = "geometry_rd"	
	{
		attribute<geometries/rdc>    geometry (arc);
		attribute<ipoint>            buffer   (poly) := polygon_i4D(geometry[ipoint], 5d);
	}

	unit<uint32> Wegen_Creator := wegen_src
	,   StorageName = "='%LocalDataDir%/NLDB/OSM/Nederland/Wegen_'+file_date+'.fss'"
	,	DialogType = "Map"
	,	DialogData = "geometry"	
	{
		attribute<geometries/rdc>              geometry (arc) := wegen_src/geometry_rd;
		attribute<string>                      fclass         := wegen_src/fclass;
		attribute<int32>                       maxspeed       := wegen_src/maxspeed;
	}
	
	unit<uint32> Wegen
	:   StorageName = "='%LocalDataDir%/NLDB/OSM/Nederland/Wegen_'+file_date+'.fss'"
	,	DialogType = "Map"
	,	DialogData = "geometry"	
	// ,	StorageReadOnly = "True"
	{
		attribute<geometries/rdc>              geometry (arc);
		attribute<string>                      fclass;
		attribute<int32>                       maxspeed;
		
		attribute<m>                           lengte               := arc_length(geometry, m);
		attribute<string>                      type                 := fclass;

		attribute<typeringen/OSM/wegtype>          wegtype              := rlookup(type, typeringen/OSM/wegtype/name);   
		attribute<typeringen/OSM/wegtypegroep>     wegtypegroep         := typeringen/OSM/wegtype/wegtypegroepnr[wegtype];

		attribute<bool>                        isPartOfCarNetwork   := typeringen/OSM/wegtype/IsPartOfCarNetwork[wegtype];
		attribute<bool>                        isPartOfBikeNetwork  := typeringen/OSM/wegtype/IsPartOfBikeNetwork[wegtype];
		attribute<bool>                        isPartOfPedestrianNetwork:= typeringen/OSM/wegtype/IsPartOfPedestrianNetwork[wegtype];

		attribute<bool>                        isMotorWay           := (type = 'motorway' || type = 'motorway_link');
		attribute<bool>                        isMajor              := type = 'primary_link' || type = 'secondary_link' || type = 'secondary' || type = 'primary';
		attribute<bool>                        isStreet             := !isMotorWay && !isMajor;
		
		attribute<float32>                     congestion_speed_motorways_MorningRush := rjoin(id(.), Motorways/nr_OrgEntity, Motorways/congestion_speed_MorningRush);
		attribute<float32>                     congestion_speed_majorways_MorningRush := rjoin(id(.), Majorways/nr_OrgEntity, Majorways/congestion_speed_MorningRush);
		attribute<float32>                     congestion_flow_motorways_MorningRush := rjoin(id(.), Motorways/nr_OrgEntity, Motorways/congestion_flow_MorningRush);
		attribute<float32>                     congestion_flow_majorways_MorningRush := rjoin(id(.), Majorways/nr_OrgEntity, Majorways/congestion_flow_MorningRush);
		
		attribute<float32>                     congestion_speed_motorways_NoonRush := rjoin(id(.), Motorways/nr_OrgEntity, Motorways/congestion_speed_NoonRush);
		attribute<float32>                     congestion_speed_majorways_NoonRush := rjoin(id(.), Majorways/nr_OrgEntity, Majorways/congestion_speed_NoonRush);
		attribute<float32>                     congestion_flow_motorways_NoonRush := rjoin(id(.), Motorways/nr_OrgEntity, Motorways/congestion_flow_NoonRush);
		attribute<float32>                     congestion_flow_majorways_NoonRush := rjoin(id(.), Majorways/nr_OrgEntity, Majorways/congestion_flow_NoonRush);
		
		
		attribute<float32>                     congestion_speed_MorningRush := IsDefined(congestion_speed_motorways_MorningRush) && congestion_speed_motorways_MorningRush != 0f
																				? congestion_speed_motorways_MorningRush 
																				: IsDefined(congestion_speed_majorways_MorningRush) && congestion_speed_majorways_MorningRush != 0f
																					? congestion_speed_majorways_MorningRush
																					: (0/0)[float32];
		attribute<float32>                     congestion_flow_MorningRush  := IsDefined(congestion_flow_motorways_MorningRush) && congestion_flow_motorways_MorningRush != 0f
																				? congestion_flow_motorways_MorningRush 
																				: IsDefined(congestion_flow_majorways_MorningRush) && congestion_flow_majorways_MorningRush != 0f
																					? congestion_flow_majorways_MorningRush
																					: (0/0)[float32];
																					
		attribute<float32>                     congestion_speed_NoonRush := IsDefined(congestion_speed_motorways_NoonRush) && congestion_speed_motorways_NoonRush != 0f
																				? congestion_speed_motorways_NoonRush 
																				: IsDefined(congestion_speed_majorways_NoonRush) && congestion_speed_majorways_NoonRush != 0f
																					? congestion_speed_majorways_NoonRush
																					: (0/0)[float32];
		attribute<float32>                     congestion_flow_NoonRush  := IsDefined(congestion_flow_motorways_NoonRush) && congestion_flow_motorways_NoonRush != 0f
																				? congestion_flow_motorways_NoonRush 
																				: IsDefined(congestion_flow_majorways_NoonRush) && congestion_flow_majorways_NoonRush != 0f
																					? congestion_flow_majorways_NoonRush
																					: (0/0)[float32];
		
		unit<uint32> Motorways := subset(isMotorWay)
		,	DialogType = "Map"
		,	DialogData = "geometry"	
		{
			attribute<geometries/rdc>              geometry (arc)     := ../geometry[nr_OrgEntity];
			attribute<float32>                     congestion_speed_MorningRush   := rjoin(id(.), RoadPointSet/ArcID_motorways_MorningRush, RoadPointSet/mean_speed_MorningRush);
			attribute<float32>                     congestion_speed_NoonRush      := rjoin(id(.), RoadPointSet/ArcID_motorways_NoonRush, RoadPointSet/mean_speed_NoonRush);
			attribute<float32>                     congestion_flow_MorningRush    := rjoin(id(.), RoadPointSet/ArcID_motorways_MorningRush, RoadPointSet/mean_flow_MorningRush);
			attribute<float32>                     congestion_flow_NoonRush       := rjoin(id(.), RoadPointSet/ArcID_motorways_NoonRush, RoadPointSet/mean_flow_NoonRush);
		}
		unit<uint32> Majorways := subset(isMajor)
		,	DialogType = "Map"
		,	DialogData = "geometry"	
		{
			attribute<geometries/rdc>              geometry (arc)     := ../geometry[nr_OrgEntity];
			attribute<float32>                     congestion_speed_MorningRush   := rjoin(id(.), RoadPointSet/ArcID_majorways_MorningRush, RoadPointSet/mean_speed_MorningRush);
			attribute<float32>                     congestion_speed_NoonRush      := rjoin(id(.), RoadPointSet/ArcID_majorways_NoonRush, RoadPointSet/mean_speed_NoonRush);
			attribute<float32>                     congestion_flow_MorningRush    := rjoin(id(.), RoadPointSet/ArcID_majorways_MorningRush, RoadPointSet/mean_flow_MorningRush);
			attribute<float32>                     congestion_flow_NoonRush       := rjoin(id(.), RoadPointSet/ArcID_majorways_NoonRush, RoadPointSet/mean_flow_NoonRush);
		}
		
		unit<uint32> RoadPointSet := Brondata/NWB/RoadPointSet
		{
			attribute<float32> mean_speed_MorningRush       (NWB/RoadPointSet) := IsDefined(Link_OSM_Motorways_to_NWB/mean_speed_MorningRush) ? Link_OSM_Motorways_to_NWB/mean_speed_MorningRush : Link_OSM_Majorways_to_NWB/mean_speed_MorningRush;
			attribute<float32> mean_speed_NoonRush          (NWB/RoadPointSet) := IsDefined(Link_OSM_Motorways_to_NWB/mean_speed_NoonRush)    ? Link_OSM_Motorways_to_NWB/mean_speed_NoonRush : Link_OSM_Majorways_to_NWB/mean_speed_NoonRush;
			attribute<float32> mean_flow_MorningRush        (NWB/RoadPointSet) := IsDefined(Link_OSM_Motorways_to_NWB/mean_speed_MorningRush) ? Link_OSM_Motorways_to_NWB/mean_flow_MorningRush  : Link_OSM_Majorways_to_NWB/mean_flow_MorningRush;
			attribute<float32> mean_flow_NoonRush           (NWB/RoadPointSet) := IsDefined(Link_OSM_Motorways_to_NWB/mean_speed_NoonRush)    ? Link_OSM_Motorways_to_NWB/mean_flow_NoonRush  : Link_OSM_Majorways_to_NWB/mean_flow_NoonRush;
			attribute<uint32>  ArcID_motorways_MorningRush  (NWB/RoadPointSet) := IsDefined(Link_OSM_Motorways_to_NWB/mean_speed_MorningRush) ? Link_OSM_Motorways_to_NWB/ArcID : (0/0);
			attribute<uint32>  ArcID_motorways_NoonRush     (NWB/RoadPointSet) := IsDefined(Link_OSM_Motorways_to_NWB/mean_speed_NoonRush)    ? Link_OSM_Motorways_to_NWB/ArcID : (0/0);
			attribute<uint32>  ArcID_majorways_MorningRush  (NWB/RoadPointSet) := IsDefined(Link_OSM_Motorways_to_NWB/mean_speed_MorningRush) ? (0/0) : Link_OSM_Majorways_to_NWB/ArcID;
			attribute<uint32>  ArcID_majorways_NoonRush     (NWB/RoadPointSet) := IsDefined(Link_OSM_Motorways_to_NWB/mean_speed_NoonRush)    ? (0/0) : Link_OSM_Majorways_to_NWB/ArcID;
		}

		container Link_OSM_Motorways_to_NWB := connect_info(Motorways/geometry, Brondata/NWB/RoadPointSet/Point)
		, FreeData = "false"
		{
			attribute<float32> mean_speed_MorningRush (NWB/RoadPointSet) := dist[uint32] < 10 ? NWB/RoadPointSet/mean_speed_MorningRush : (0/0)[float32];
			attribute<float32> mean_speed_NoonRush    (NWB/RoadPointSet) := dist[uint32] < 10 ? NWB/RoadPointSet/mean_speed_NoonRush : (0/0)[float32];
			attribute<float32> mean_flow_MorningRush  (NWB/RoadPointSet) := dist[uint32] < 10 ? NWB/RoadPointSet/mean_flow_MorningRush : (0/0)[float32];
			attribute<float32> mean_flow_NoonRush     (NWB/RoadPointSet) := dist[uint32] < 10 ? NWB/RoadPointSet/mean_flow_NoonRush : (0/0)[float32];
		}
		
		container Link_OSM_Majorways_to_NWB := connect_info(Majorways/geometry, Brondata/NWB/RoadPointSet/Point)
		, FreeData = "false"
		{
			attribute<float32> mean_speed_MorningRush (NWB/RoadPointSet) := dist[uint32] < 10 ? NWB/RoadPointSet/mean_speed_MorningRush : (0/0)[float32];
			attribute<float32> mean_speed_NoonRush    (NWB/RoadPointSet) := dist[uint32] < 10 ? NWB/RoadPointSet/mean_speed_NoonRush : (0/0)[float32];
			attribute<float32> mean_flow_MorningRush  (NWB/RoadPointSet) := dist[uint32] < 10 ? NWB/RoadPointSet/mean_flow_MorningRush : (0/0)[float32];
			attribute<float32> mean_flow_NoonRush     (NWB/RoadPointSet) := dist[uint32] < 10 ? NWB/RoadPointSet/mean_flow_NoonRush : (0/0)[float32];
		}
	}
	
	#include <Abroad.dms>
	#include <NetworkPreperation.dms>
	
	*/
}
